\import Paths.Meta
\import Utils
\open Nat (+, *)

-- 1. Чему равно fileTest (в нормальной форме)? Докажите это.

\import lect03 (fileTest, foobar)

\func foobar=0Proof (x y : Nat): foobar x y = 0 \elim x, y
  | 0, 0 => idp
  | 0, suc y => idp
  | suc x, 0 => idp
  | suc x, suc y => \let | p => foobar=0Proof x (y + 100) | q => foobar=0Proof (suc x) y \in
    pmap (\lam z => foobar x (y + 100) + z) q *> p

\func fileTestProof : fileTest = (\lam _ _ => 0, 8, 13, 55, 18, 21) => ext (ext foobar=0Proof, idp, idp, idp ,idp, idp)

-- 2. Чему равно M5.t''' (в нормальной форме)? Докажите это.

\func M5_t'''Proof : lect03.M5.t''' = ((82, 42, 61, 82, 34 , 42, 61, 29), 25, (42, 29)) =>
  ext (ext (idp, idp, idp, idp, idp, idp, idp, idp), idp, ext (idp, idp))


-- 3. Докажите ассоциативность ++.

\func ++-assoc {A : \Type} (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) \elim xs
  | nil => idp
  | :: a xs => pmap (\lam xs => a :: xs) (++-assoc xs ys zs)

-- 4. Докажите, что reverse (reverse xs) = xs, где reverse определен через ++.

\func reverse {A : \Type} (xs : List A) : List A
  | nil => nil
  | :: x xs => reverse xs ++ x :: nil

-- Это утверждение будет полезно для доказательства.

\func reverse++ {A : \Type} (xs ys : List A) : reverse (xs ++ ys) = reverse ys ++ reverse xs \elim xs
  | nil => ++nil (reverse ys)
  | :: a xs => pmap (\lam xs => xs ++ a :: nil) (reverse++ xs ys) *> ++-assoc (reverse ys) (reverse xs) (a :: nil)
  \where {
    \func ++nil {A : \Type} (xs : List A): xs = xs ++ nil \elim xs
      | nil => idp
      | :: a xs => pmap (\lam xs => a :: xs) (++nil xs)
  }

\func reverse-isInvolutive {A : \Type} (xs : List A) : reverse (reverse xs) = xs \elim xs
  | nil => idp
  | :: a xs => reverse++ (reverse xs) (a :: nil) *> pmap (\lam xs => a :: xs) (reverse-isInvolutive xs)

-- 5. Докажите дистрибутивность умножения над сложением для натуральных чисел.

\import lect03 (+-assoc, +-comm)

\func rdistr (n m k : Nat) : (m + k) * n = m * n + k * n \elim n
  | 0 => idp
  | suc n => pmap (\lam z => z + (m + k)) (rdistr n m k) *>
  sym(+-assoc (m * n + k * n) m k) *>
  pmap (\lam z => z + k) ( +-assoc (m * n) (k * n) m *>
  pmap (\lam z => (m * n) + z) (+-comm (k * n) m) *>
  sym(+-assoc (m * n) m (k * n))) *>
  +-assoc (m * n + m) (k * n) k

\func ldistr (n m k : Nat) : n * (m + k) = n * m + n * k \elim m
  | 0 => idp
  | suc m => pmap (\lam z => z + n) (ldistr n m k) *>
  +-assoc (n * m) (n * k) n  *>
  pmap (\lam z => n * m + z) (+-comm (n * k) n) *>
  sym(+-assoc (n * m) n (n * k))
