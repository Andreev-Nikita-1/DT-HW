\import Utils

-- 1. Определите полиморфный tail для списков.

\func tail {A : \Type} (xs : List A) : List A \elim xs
  | nil => nil
  | :: a xs => xs


-- 2. Реализуйте любой (but choose wisely) алгоритм сортировки. Функцию сравнения можно принимать в качестве аргумента.

\func sort {A : \Type} (xs : List A) (leq : A -> A -> Bool) : List A => sort' xs leq (len xs)
  \where {
    \func len {B : \Type} (xs : List B) : Nat \elim xs
      | nil => 0
      | :: a xs => suc (len xs)

    \func sort' {B : \Type} (xs : List B) (leq : B -> B -> Bool) (dep : Nat) : List B \elim xs, dep
      | _, 0 => nil
      | nil, _ => nil
      | :: a nil, _ => a :: nil
      | :: a (:: a1 xs), suc n => \let (ls, rs) => split (a :: a1 :: xs) \in merge' (sort' ls leq n) (sort' rs leq n) leq

    \func merge' {B : \Type} (l r : List B) (leq : B -> B -> Bool) : List B \elim l, r
      | ls, nil => ls
      | nil, rs => rs
      | :: a ls, :: b rs => if (leq a b) (a :: (merge' ls (b :: rs) leq)) (b ::  (merge' (a :: ls) rs leq))

    \func split {B : \Type}(xs : List B) : \Sigma (List B) (List B) \elim xs
      | nil => (nil, nil)
      | :: a nil => (a :: nil, nil)
      | :: a (:: a1 xs) => \let (l, r) => split xs \in (a :: l, a1 :: r)
  }

\func leq (x y : Nat) : Bool \elim x, y
  | 0, _ => true
  | suc x, 0 => false
  | suc x, suc y => leq x y

\func sortTest : sort (4 :: 1 :: 3 :: 2 :: nil) leq = (1 :: 2 :: 3 :: 4 :: nil) => idp

-- 3. Докажите ассоциативность && и ||.

\func &&-assoc (x y z : Bool) : (x && y) && z = x && (y && z) \elim x
  | true => idp
  | false => idp

\func ||-assoc (x y z : Bool) : (x || y) || z = x || (y || z) \elim x
  | true => idp
  | false => idp

-- 4. Докажите, что fac 3 равно 6.

\func fac (n : Nat) : Nat \elim n
  | 0 => 1
  | suc n => fac n Nat.* suc n

\func facProof : fac 3 = 6 => idp

-- 5. Докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t1 : (P and Q -> R) -> P -> Q -> R

\func t1 {P Q R : \Type} (f : \Sigma P Q -> R) (p : P) (q : Q) : R => f (p, q)

-- t2 : (P -> R) -> (Q -> R) -> P or Q -> R

\func t2 {P Q R : \Type} (f : P -> R) (g : Q -> R) (h : Either P Q) : R \elim h
  | inl a => f a
  | inr b => g b

-- t3 : ((P -> Q -> R) -> P) -> (P -> R) -> R

\func t3 {P Q R : \Type} (f : (P -> Q -> R) -> P) (g : P -> R) : R => g (f (\lam x y => g x))

-- 6. Сформулируйте и докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t4 : (P -> Q -> R) -> P and Q -> R

\func t4 {P Q R : \Type} (f : P -> Q -> R) (p : \Sigma P Q) : R => f p.1 p.2

-- t5 : (P or Q -> P and Q) -> (P -> Q) and (Q -> P)

\func t5 {P Q R : \Type} (f :  Either P Q -> \Sigma P Q)  : \Sigma (P -> Q) (Q -> P) =>
  (\lam x => (f (inl x)).2, \lam x => (f (inr x)).1)

-- t6 : ((((P -> Q) -> P) -> P) -> Q) -> Q

\func t6 {P Q : \Type} (f : (((P -> Q) -> P) -> P) -> Q) : Q => f (\lam h => h (\lam p => f (\lam _  => p)))


-- 7. Докажите следующие утверждения.

-- s1 : Если для любого x : Nat верно P(x), то существует x : Nat для которого P(x) верно.

\func s1 (P : Nat -> \Type) (h : \Pi (x : Nat) -> P x) : \Sigma (x : Nat) (P x) => (0, h 0)

-- s2 : Если не существует x : Nat такого, что верно P(x), то P(3) не верно.

\func s2 (P : Nat -> \Type) (h : \Sigma (x : Nat) (P x) -> Empty) : P 3 -> Empty => \lam p => h (3, p)

-- 8. Сформулируйте и докажите следующие утверждения.

-- s3 : Если для всех x : Nat верно, что P(x) влечет Q(x), и существует x : Nat для которого верно P(x), то существует x : Nat для которого верно Q(x).

\func s3 (P Q : Nat -> \Type) (h : \Pi (x : Nat) -> (P x -> Q x)) (p : \Sigma (x : Nat) (P x)) : \Sigma (x : Nat) (Q x) =>
  (p.1, h p.1 p.2)

-- s4 : Если для всех x : Nat либо не верно P(x), либо не верно Q(x), то P(3) влечет, что Q(3) не верно.

\func s4 (P Q : Nat -> \Type) (h : \Pi (x : Nat) -> (Either (P x -> Empty) (Q x -> Empty))) : (P 3 -> Q 3 -> Empty) =>
  \case h 3 \with {
    | inl f => \lam p _ => f p
    | inr f => \lam _ q => f q
  }
