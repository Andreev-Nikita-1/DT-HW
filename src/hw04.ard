\import Utils
\import lect04 \hiding (Vec, vnil, vcons)
\open Nat (+, *)

-- 1. Напишите функцию lookup, которая принимает List A и натуральное число и возвращает элемент по заданому индексу.
--    В общем случае эту функцию определить невозможно, т.к. индекс может быть больше, чем число элементов в списке.
--    Поэтому эта функция должна дополнительно еще принимать доказательство того, что индекс находится в допустимых границах, в виде T (n < length xs).

\func \infix 4 < (x y : Nat) : Bool
  | 0, 0 => false
  | 0, suc y => true
  | suc x, 0 => false
  | suc x, suc y => x < y

\func lookup {A : \Type} (xs : List A) (n : Nat) (p : (n < length xs) = true) : A \elim xs, n
  | nil, 0 => absurd( true/=false (sym p *> idp))
  | nil, suc n => absurd( true/=false (sym p *> idp))
  | :: a xs, 0 => a
  | :: a xs, suc n => lookup xs n p


-- 2. Реализуйте аналоги функции replicate для vec и Vec (эта функция создает список заданной длины, состоящий из повторений данного элемента).

\func replicate-vec {A : \Type} (a : A) (n : Nat) : vec A n \elim n
  | 0 => ()
  | suc n => (a, replicate-vec a n)

\func replicate-Vec {A : \Type} (a : A) (n : Nat) : Vec A n \elim n
  | 0 => vnil
  | suc n => vcons a (replicate-Vec a n)



-- 3. Реализуйте аналоги функции map для vec и Vec.

\func map-vec {A B : \Type} (n : Nat) (xs : vec A n) (f : A -> B) : vec B n \elim n, xs
  | 0, xs => ()
  | suc n, xs => (f xs.1, map-vec n xs.2 f)

\func map-Vec {A B : \Type} (n : Nat) (xs : Vec A n) (f : A -> B) : Vec B n \elim n, xs
  | 0, vnil => vnil
  | suc n, vcons a xs => vcons (f a) (map-Vec n xs f)


-- 4. Реализуйте аналоги функции zipWith для vec и Vec.
--    Функция должна принимать вектора одинаковой длины.

\func zipWitn-vec {A B C : \Type} (f : A -> B -> C) (n : Nat) (xs : vec A n) (ys : vec B n) : vec C n \elim n
  | 0 => ()
  | suc n => (f xs.1 ys.1, zipWitn-vec f n xs.2 ys.2)

\func zipWitn-Vec {A B C : \Type} (f : A -> B -> C) (n : Nat) (xs : Vec A n) (ys : Vec B n) : Vec C n \elim n, xs, ys
  | 0, vnil, vnil => vnil
  | suc n, vcons a xs, vcons b ys => vcons (f a b) (zipWitn-Vec f n xs ys)


-- 5. Определите конгруэнтность для функций двух аргументов через transport.
--    Можно использовать любые функции, определенные через transport.

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  transport (\lam x => f a b = f a' x) q (transport (\lam x => f a b = f x b) p idp)

-- 6. Докажите, что transport выражается через pmap и repl и наоборот.

-- repl говорит, что если у нас есть два равных типа, то у нас есть функция из одного во второй.
-- Определите repl через transport.

\func repl {A B : \Type} (p : A = B) (a : A) : B => transport (\lam x => x) p a

-- Определите transport через repl и pmap.

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' => repl (pmap B p) b

-- 7. Определите тип CTree A n полных бинарных деревьев высоты ровно n, которые хранят элементы только во внутренних узлах, но не в листьях.
--    Высота листа равна 0.

\data CTree (A : \Type) (n : Nat) \elim n
  | 0 => leaf
  | suc n => node (a : A) (left : CTree A n) (right : CTree A n)

-- 8. Определите тип Tree A n бинарных деревьев высоты не больше n, которые хранят элементы только во внутренних узлах, но не в листьях.
--    Высота листа равна 0.

\data Tree (A : \Type) (n : Nat) \elim n
  | 0 => leaf
  | suc n => {leaf' | node (a : A) (left : Tree A n) (right : Tree A n)}


-- определите функцию, возвращающую высоту дерева.

\func height {A : \Type} (n : Nat) (t : Tree A n) : Fin (suc n) \elim n, t
  | 0, leaf => fzero
  | suc n, leaf' => fzero
  | suc n, node a l r => \let (a, b) => ((height n l), (height n r)) \in fsuc (max (suc n) a b)
  \where{
    \open Tree

    \func max (n : Nat) (a b : Fin n) : Fin n \elim n, a, b
      | suc n, fzero, a => a
      | suc n, a, fzero => a
      | suc n, fsuc a, fsuc b => fsuc (max n a b)
  }

-- Optional task
-- 9. Функции Fin n -> A соответствуют спискам элементов A длины n.
--     Функция, преобразующая Vec A n в Fin n -> A, была реализована на лекции.
--     Реализуйте обратную функцию.

\func coin {A : \Type} {n : Nat} (f : Fin n -> A) : Vec A n \elim n
  | 0 => vnil
  | suc n => vcons (f fzero) (coin (\lam x => f (fsuc x)))

-- Optional task
-- 10. Определите тип матриц и ряд функций над ними.

\func Mat (A : \Type) (n m : Nat) => vec (vec A n) m

-- диагональная матрица с элементами e на диагонали и z на остальных позициях.

\func diag {A : \Type} (z e : A) (n : Nat) : Mat A n n \elim n
  | 0 => ()
  | suc n => \let (first, last) => ((e, (replicate-vec z n)), diag z e n)
             \in (first, (map-vec n last (\lam xs => (z, xs))))

\func testDiag : (diag 0 1 3) =
(
  (1,(0,(0,()))), (
  (0,(1,(0,()))), (
    (0,(0,(1,()))),
    ()))) => idp

-- транспонирование матриц

\func transpose {A : \Type} {n m : Nat} (M : Mat A n m) : Mat A m n \elim n, m
  | 0, 0 => ()
  | 0, suc m => ()
  | suc n, 0 => replicate-vec (()) (suc n)
  | suc n, suc m => \let
    | first => map-vec (suc m) M (\lam v => v.1)
    | second => transpose (map-vec m M.2 (\lam v => v.2))
    | second' => zipWitn-vec (\lam x xs => (x, xs)) n M.1.2 second
                    \in (first, second')

\func testMat : Mat Nat 3 2 =>
  (
    (1,(2,(3,()))), (
    (4,(5,(6,()))),
    ()))

\func testTranspose : transpose {Nat} {3} {2} testMat =
(
  (1,(4,())), (
  (2,(5,())) , (
    (3,(6,())) ,
    ()))) => idp


-- сложение матриц

\func matAdd {A : \Type} (add : A -> A -> A) (n m : Nat) (M N : Mat A n m) : Mat A n m =>
  zipWitn-vec (\lam v w => zipWitn-vec (add) n v w) m M N

\func testAdd : matAdd (+) 3 2 testMat testMat =
(
  (2,(4,(6,()))), (
  (8,(10,(12,()))),
  ())) => idp

-- умножение матриц

-- z ─ нейтральный элемент по сложению.

\func matMul {A : \Type} (z : A) (add mul : A -> A -> A) (n m k : Nat) (M : Mat A n m) (N : Mat A m k) : Mat A n k =>
  \let M' => transpose M \in map-vec k N (\lam w => map-vec n M' (\lam v => inner z add mul m v w))
  \where {
    \func inner {A : \Type} (z : A) (add mul : A -> A -> A) (n : Nat) (v w : vec A n) : A \elim n
      | 0 => z
      | suc n => (v.1 `mul` w.1) `add` (inner z add mul n v.2 w.2)
  }

\func testmul : matMul 0 (+) (*) 2 3 2 (transpose {Nat} {3} {2} testMat) testMat =
(
  (14,(32,())), (
  (32,(77,())),
  ())) => idp



-- 11. Укажите явно чему равен уровень в каждом из вызовов id' ниже.
--     Напишите явно чему равны типы всех функций idTest*.

\func id' {A : \Type} (a : A) => a

\func idTest1 : \Pi (A : \Type \lp) -> A -> A => id' (\suc (\suc \lp)) (id' (\suc \lp) (id \lp))

\func idTest2 : \Type \lp -> \Type \lp => id' (\suc \lp) Maybe
